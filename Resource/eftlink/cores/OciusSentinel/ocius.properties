# User ID to send to the terminal when logging on. The ID is allocated by the Ocius Sentinel, and needs to be encrypted for default configuration.
user.id =

# User pin to send to the terminal when logging on. The pin is allocated by the Ocius Sentinel, and needs to be encrypted for default configuration.
user.pin =

# User ID initialization vector, as provided when encrypting User ID
user.id.iv =

# User pin initialization vector, as provided when encrypting User pin
user.pin.iv =

# The account ID to send with each transaction.
account.id = 

# Account ID initialization vector, as provided when encrypting account.id
account.id.iv = 

# The account ID to use for Transax transactions.
transax.account.id = 

# Transax account ID initialization vector, as provided when encrypting transax.account.id
transax.account.id.iv = 

# Manager pin to send to the terminal when logging on. The manager pin is allocated by Ocius Sentinel, and needs to be encrypted for default configuration.
manager.pin=

# Manager pin initialization vector, as provided when encrypting Manager pin
manager.pin.iv=

# IP address of the Ocius Sentinel software
ip.address =

# Integration port timeout controls how long eftlink waits (in seconds) for a incoming response. if integration.port.timeout value is set as 0 then EFTLink will wait indefinitely.
integration.port.timeout = 0

# IP port of the terminal
ip.port=25000

# The port that the core listens on for status messages from Ocius Sentinel
progress.ip.port = 25001 

# Defines the type of gift card supported by the core. 0 = Park Retail (the default) 1 = SVS.
gift.card.type = 0

# Identifies whether the providers client is running on the Pin Pad.
# if true legacy.printing is set to false.
#		  auto.logoff is set to true.
ocius.payment.application.on.device = false

# If true and already logged in then send a logoff followed by another logon.
auto.logoff = false

# If this is set true and not already logged in, then the core will log on to the terminal automatically when it receives a transaction
auto.logon = true

# The number of milliseconds to wait before issuing an automatic logon command to Sentinel.
pause.before.auto.logon = 1000

# The number of milliseconds to wait after an auto logon before sending a transaction.
auto.logon.pause = 5000

# If true the core will automatically instruct Ocius Sentinel to work offline if the remote server is unavailable.
auto.offline = false

# The maximum length permitted for a cashback amount.
max.cashback.length = 5

# This may be set to an integer from 0 to 4 inclusive.
# 0 - Not Set
# 1 - Do Not Register (the default)
# 2 - Register
# 3 - Register Only
# 4 - Register, decline transaction if registration fails.
account.on.file.mode = 1

# This may be set to 0 <Non EFT card>, 1 <EFT card> or 2 <Automatic> and defines what type of card is to be read when the core receives a card read request
card.read.mode = 2

# If true this should cause Ocius Sentinel to prompt for the card to be removed after a card read. 
remove.card.after.read = true

# If true then there will be an automatic response to the LicenceDetailConfirmation status from Ocius Sentinel.
auto.confirm.licence.key = true

#This setting configures the customer reference generated by the core. 
#It may contain any text except commas but the following case-sensitive keywords will be substituted with corresponding data
# Date: the transaction date provided by the POS
# Time: the transaction time provided by the POS
# Transnum: the transaction number provided by the POS
# User: the operator ID provided by the POS
# Pos: the POS ID provided by the POS
reference = date transnum user pos

# For telesales if a card has been keyed via a previous card swipe and customer address capture is not required as part of the subsequent transaction then this setting should be set true.
simple.cnp.enabled = false

# If true then the signature receipt will be suppressed for telesales transactions when simple.cnp.enabled is true. Applies only for XML based receipts.
suppress.cnp.signature.receipt = true

# The Transax transaction types which require card entry at the PED. This may be any combination of the letters A, B, M, O or P without spaces or separators.
transax.types.requiring.card = P

# Provide an acknowledgeable message to bring the failure to the attention of the operator. The default value is blank (no message will be displayed).
transax.declined.operator.message = 

# If this is set true then Ocius Sentinel status 20 (Confirm Auth Code) will be answered automatically.
auto.confirm.auth.code = false

# This defines the label shown against the transaction amount in the voice referral prompt.
voice.referral.amount.text = Amount: 

# If true the two stage referral dialogue where the operator must first confirm that the authorization has been accepted before entering the authorization code
# will be reduced to a single dialogue where the operator may immediately enter an authorization code or blank to cancel.
voice.referral.compact.dialogue = false

# By default the signature verification dialogue offers two options to confirm or reject the signature. 
# If this setting has a value a third option will be displayed which will cause the signature slip to be reprinted. 
# The value should be the text to be displayed, for example Reprint.
signature.verification.reprint.option =

# If the POS displays its own declined message on receiving a payment failure response from the core then this setting may be used to suppress any similar display message from the core.
suppress.final.declined.message = false

# Indicates whether the core should translate status messages.
auto.translate.status.messages = false

# Indicates whether status text from Ocius Sentinel should be spaced out for display, for example ExpiryDateRequired becomes Expiry Date Required.
space.out.status.messages = true

# If status message 55 (PEDUnavailable) is received this setting specifies the number of milliseconds to wait before requesting Ocius Sentinel to retry.
ped.unavailable.retry.pause = 0

# if set to true file-based printing will be used, otherwise socket-based printing will be used.
legacy.printing = true

# The location of the ocius client software.
ocius.sentinel.exe.path = \Program Files\Verifone\Ocius Sentinel\OciusSentinel.exe

# Defines the minimum interval in milliseconds between a card swipe request from the POS and a cancellation of the card swipe (abort). 
cancel.card.wait.delay = 1000

# After a processing a login request from the POS this is the maximum time to wait in milliseconds for a Ready status. If this setting is zero then the wait will be indefinite.
max.login.ready.wait = 0

# wait for Ocius Sentinel to complete all necessary actions before responding to the POS with the result
await.ready.after.transaction = true

# If true EFTLink will use the card scheme name provided by Ocius Sentinel rather than performing a look-up in its Card Range File.
use.ocius.card.text = false

# the number of times to retry the software download. 1 indicates unlimited retries.
download.retry.limit = 1

# If a software download fails due to reaching the retry limit, this setting defines whether a download cancellation command should be sent.
cancel.download.on.failure = true

# When restarting Ocius Sentinel after a software download this setting defines the delay in milliseconds between instructing Sentinel to shut down and restarting it.
ocius.sentinel.restart.pause = 3000

# Number of connection retries when Ocius Sentinel reports that it is offline.
offline.reconnect.retry.limit = 0

# If true then the core will send DeviceEvent messages to the POS when a card is inserted into or removed from the PED. This is determined from status messages sent to the core by Ocius Sentinel.
report.card.events = false

# If true then the core will print a DCC currency conversion quote at the point when the customer is asked to make a DCC decision at the PED.
print.dcc.quote = true

# Whether to display the status update from Ocius to the POS or not. Default is false.
send.ocius.update.to.pos = false

# if true, user.id, user.pin, account.id and transax.account.id must be encryped using the encryption utility.
encrypted.passwords = true

# The name of the keystore file containing the key for decrypting passwords.
keystore.name = ocius.keystore

#####################
# Card Wait options #
#####################

# If true the core will send CARDWAIT records, otherwise it will operate in standard mode. 
card.wait.mode = false

# header text to display on the PED when it prompts for the card details to be presented. 
wait.record.header =

# body text to display on the PED when it prompts for the card details to be presented.
wait.record.body = 

# footer text to display on the PED when it prompts for the card details to be presented.
wait.record.footer =

# This is the time in seconds for the PED to wait for the card details to be presented.
wait.record.timeout = 0

# This is a hex bitmap of the capture methods that the PED is to allow. 
# The hex bitmap is comprised of the following hex values:
# Keyed = 01 
# Swipe = 02 
# ICC = 04 
# Reserved = 08 
wait.record.capture.methods = 

# This is a hex bitmap of the fallback methods that the PED is to allow. 
# The hex bitmap is comprised of the following hex values:
# Fallback from ICC to Swipe = 01 
# Fallback from Swipe to Key = 02 
wait.record.fallback.methods = 

# header text to display on the PED when it prompts for the card details to be presented for customer not present transactions. 
wait.record.header.cnp =

# body text to display on the PED when it prompts for the card details to be presented for customer not present transactions.
wait.record.body.cnp = 

# footer text to display on the PED when it prompts for the card details to be presented for customer not present transactions.
wait.record.footer.cnp =

# This is the time in seconds for the PED to wait for the card details to be presented for customer not present transactions.
wait.record.timeout.cnp = 0

# This is a hex bitmap of the capture methods that the PED is to allow for customer not present transactions. 
# The hex bitmap is comprised of the following hex values:
# Keyed = 01 
# Swipe = 02 
# ICC = 04 
# Reserved = 08 
wait.record.capture.methods.cnp = 

# This is a hex bitmap of the fallback methods that the PED is to allow for customer not present transactions. 
# The hex bitmap is comprised of the following hex values:
# Fallback from ICC to Swipe = 01 
# Fallback from Swipe to Key = 02 
wait.record.fallback.methods.cnp = 

#############################
# Crypto-agility - keystore #
#############################

# When keysize is greater than 128, you may get java.security.InvalidKeyException: Illegal key size or default parameters
# You will need to download additional Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files
# and extract those files to ${java.home}/jre/lib/security/
crypto.keygenType = AES
crypto.cipherType = AES/GCM/PKCS5Padding
crypto.keySize = 128
crypto.hashbyteSize = 384
crypto.iterations = 100000
crypto.factoryinstance = PBKDF2WithHmacSHA512
crypto.keystoretype = JKS
crypto.digest = SHA-512

#Algorithm Secure setting
#crypto.keygenType = AES
#crypto.cipherType = AES/GCM/PKCS5Padding
#crypto.keySize = 128
#crypto.hashbyteSize = 384
#crypto.iterations = 100000
#crypto.factoryinstance = PBKDF2WithHmacSHA512
#crypto.secretkeyspec = AES
#crypto.keystoretype = JKS
#crypto.digest = SHA-512

############
# Receipts #
############

# If true this will cause the customer receipt to be sent as part of the final CardServiceResponse 
defer.customer.receipt = true

# If true then void customer receipts will not be printed immediately but will be embedded in the final response from the core. Applies only in XML mode.
defer.void.receipts = false

# The text to be displayed at the POS when prompting the operator to remove the merchant receipt from the printer.
tear.merchant.receipt.text = Please Tear Merchant Receipt

# The text to be displayed at the POS when prompting the operator to remove the customer receipt from the printer.
tear.customer.receipt.text = Please Tear Customer Receipt

# Ocius Sentinel delivers receipts with lines terminated by both carriage return and linefeed characters.
# If this option is set true then the carriage return characters will be removed.
strip.receipt.carriage.returns = false

# An extra title to add to the top of a receipt which is reprinted in response to the "Re-print/Continue" message.
duplicate.receipt.title = *** Duplicate Receipt ***\n

# Whether to suppress printing of the merchant receipt so only a customer copy is provided.
suppress.merchant.receipt = false

# Whether to display the "Re-print/Continue" dialogue after printing a receipt.
offer.reprint = true

# If true the merchant receipt will not be printed but will be sent to the POS to be stored in an electronic audit journal.
store.merchant.receipt = false

# If true the deferred (embedded) customer receipt will be sent as separate lines rather than as a single block of text containing line breaks.
separate.receipt.lines = false

# If true then a default set of receipt templates will be created by EFTLink if they do not already exist in the EFTLink folder at start up. Applies only when XML receipts are in use.
deploy.default.templates = false

# If true then the core will generate a dummy success response and receipt for a payment refund request without any interaction with Ocius Sentinel.
dummy.void.receipts = false

# When using Ocius Sentinel's preformatted receipts. This defines the text within the receipt which identifies it as a merchant receipt.
fixed.receipt.merchant.text = MERCHANT COPY

# When using Ocius Sentinel's preformatted receipts. This defines the text within the receipt which identifies it as a customer receipt.
fixed.receipt.customer.text = CARDHOLDER COPY

# When using Ocius Sentinel's preformatted receipts. This defines the text within the receipt which identifies it as a signature receipt.
fixed.receipt.signature.text = Please Sign Below.

# When using Ocius Sentinel's preformatted receipts. This defines the text within the receipt which identifies it as a void receipt.
fixed.receipt.void.text = VOID

# When using Ocius Sentinel's preformatted receipts. This defines the text within the receipt which identifies it as a declined receipt.
fixed.receipt.declined.text = DECLINED

######################################
# Legacy File Based Printing options #
######################################

# properties relating to when legacy printing is set to true.
# The folder where Ocius Sentinel is to place the merchant receipt.
merchant.receipt.path = 

# The name that Ocius Sentinel will use for the merchant receipt
merchant.receipt.filename = Receipt1.txt

# The folder where Ocius Sentinel is to place the customer receipt.
customer.receipt.path = 

# The name that Ocius Sentinel is to use for the customer receipt.
customer.receipt.filename = Receipt2.txt

# The folder where Ocius Sentinel is to place the report file.
report.path = 

# The name that Ocius Sentinel is to use for the report file.
report.filename = Report.txt